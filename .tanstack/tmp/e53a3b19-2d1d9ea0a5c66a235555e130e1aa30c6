/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as AboutRouteImport } from './routes/about'
import { Route as ContactUsRouteRouteImport } from './routes/contact-us/route'
import { Route as IndexRouteImport } from './routes/index'
import { Route as ContactUsCountryRouteRouteImport } from './routes/contact-us/$country/route'
import { Route as ContactUsCountryCityIndexRouteImport } from './routes/contact-us/$country/$city/index'

const AboutRoute = AboutRouteImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => rootRouteImport,
} as any)
const ContactUsRouteRoute = ContactUsRouteRouteImport.update({
  id: '/contact-us',
  path: '/contact-us',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const ContactUsCountryRouteRoute = ContactUsCountryRouteRouteImport.update({
  id: '/$country',
  path: '/$country',
  getParentRoute: () => ContactUsRouteRoute,
} as any)
const ContactUsCountryCityIndexRoute =
  ContactUsCountryCityIndexRouteImport.update({
    id: '/$city/',
    path: '/$city/',
    getParentRoute: () => ContactUsCountryRouteRoute,
  } as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/contact-us': typeof ContactUsRouteRouteWithChildren
  '/about': typeof AboutRoute
  '/contact-us/$country': typeof ContactUsCountryRouteRouteWithChildren
  '/contact-us/$country/$city': typeof ContactUsCountryCityIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/contact-us': typeof ContactUsRouteRouteWithChildren
  '/about': typeof AboutRoute
  '/contact-us/$country': typeof ContactUsCountryRouteRouteWithChildren
  '/contact-us/$country/$city': typeof ContactUsCountryCityIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/contact-us': typeof ContactUsRouteRouteWithChildren
  '/about': typeof AboutRoute
  '/contact-us/$country': typeof ContactUsCountryRouteRouteWithChildren
  '/contact-us/$country/$city/': typeof ContactUsCountryCityIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/contact-us'
    | '/about'
    | '/contact-us/$country'
    | '/contact-us/$country/$city'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/contact-us'
    | '/about'
    | '/contact-us/$country'
    | '/contact-us/$country/$city'
  id:
    | '__root__'
    | '/'
    | '/contact-us'
    | '/about'
    | '/contact-us/$country'
    | '/contact-us/$country/$city/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  ContactUsRouteRoute: typeof ContactUsRouteRouteWithChildren
  AboutRoute: typeof AboutRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/about': {
      id: '/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/contact-us': {
      id: '/contact-us'
      path: '/contact-us'
      fullPath: '/contact-us'
      preLoaderRoute: typeof ContactUsRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/contact-us/$country': {
      id: '/contact-us/$country'
      path: '/$country'
      fullPath: '/contact-us/$country'
      preLoaderRoute: typeof ContactUsCountryRouteRouteImport
      parentRoute: typeof ContactUsRouteRoute
    }
    '/contact-us/$country/$city/': {
      id: '/contact-us/$country/$city/'
      path: '/$city'
      fullPath: '/contact-us/$country/$city'
      preLoaderRoute: typeof ContactUsCountryCityIndexRouteImport
      parentRoute: typeof ContactUsCountryRouteRoute
    }
  }
}

interface ContactUsCountryRouteRouteChildren {
  ContactUsCountryCityIndexRoute: typeof ContactUsCountryCityIndexRoute
}

const ContactUsCountryRouteRouteChildren: ContactUsCountryRouteRouteChildren = {
  ContactUsCountryCityIndexRoute: ContactUsCountryCityIndexRoute,
}

const ContactUsCountryRouteRouteWithChildren =
  ContactUsCountryRouteRoute._addFileChildren(
    ContactUsCountryRouteRouteChildren,
  )

interface ContactUsRouteRouteChildren {
  ContactUsCountryRouteRoute: typeof ContactUsCountryRouteRouteWithChildren
}

const ContactUsRouteRouteChildren: ContactUsRouteRouteChildren = {
  ContactUsCountryRouteRoute: ContactUsCountryRouteRouteWithChildren,
}

const ContactUsRouteRouteWithChildren = ContactUsRouteRoute._addFileChildren(
  ContactUsRouteRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ContactUsRouteRoute: ContactUsRouteRouteWithChildren,
  AboutRoute: AboutRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
